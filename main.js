/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "dist";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/tetris.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/board_loader.js":
/*!*****************************!*\
  !*** ./src/board_loader.js ***!
  \*****************************/
/*! exports provided: BoardLoader */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BoardLoader\", function() { return BoardLoader; });\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants.js */ \"./src/constants.js\");\n/* harmony import */ var _tetris_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tetris.js */ \"./src/tetris.js\");\nconst pasteAreaElement = document.getElementById(\"paste-area\");\nconst pastedImageElement = document.getElementById(\"pasted-image\");\n\n\n\n\nlet m_loadedStateFromImage = false;\nlet m_loadedBoard = [];\n\nfunction BoardLoader(board, canvas) {\n  this.board = board;\n  this.canvas = canvas;\n\n  setUpPasteability(this);\n}\n\nBoardLoader.prototype.resetBoard = function () {\n  // Reload the board from the image, or reset the board\n  // (have to iterate manually (not use this.board = ) to preserve the board reference that's passed around to all the files\n  for (let r = 0; r < _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"NUM_ROW\"]; r++) {\n    for (let c = 0; c < _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"NUM_COLUMN\"]; c++) {\n      this.board[r][c] = m_loadedStateFromImage\n        ? m_loadedBoard[r][c]\n        : _tetris_js__WEBPACK_IMPORTED_MODULE_1__[\"SquareState\"].empty;\n    }\n  }\n};\n\n// Get whether the board has been loaded from an image\nBoardLoader.prototype.didLoadBoardStateFromImage = function () {\n  return m_loadedStateFromImage;\n};\n\nBoardLoader.prototype.getBoardStateFromImage = function (img) {\n  var dummy_canvas = document.getElementById(\"dummy-canvas\");\n  var context = dummy_canvas.getContext(\"2d\");\n  dummy_canvas.width = img.width;\n  dummy_canvas.height = img.height;\n  context.drawImage(img, 0, 0);\n  this.resetBoard();\n\n  const cropOffset = -0.3;\n  const SQ = (img.height / 20 + img.width / 10) / 2 + cropOffset;\n  const rgbEmptyThreshold = 60; // If all three channels are <60/255, then the cell is \"empty\"\n\n  // Iterate over the image and read the square colors into the board\n  for (let c = 0; c < _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"NUM_COLUMN\"]; c++) {\n    for (let r = 0; r < _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"NUM_ROW\"]; r++) {\n      const x = Math.round((c + 0.5) * SQ);\n      const y = Math.round((r + 0.5) * SQ);\n      const pixelData = context.getImageData(x, y, 1, 1).data;\n      if (\n        Math.max(pixelData[0], pixelData[1], pixelData[2]) > rgbEmptyThreshold\n      ) {\n        this.board[r][c] = _tetris_js__WEBPACK_IMPORTED_MODULE_1__[\"SquareState\"].color1; //\"rgba(\" + pixelData.join(\",\") + \")\";\n      } else {\n        this.board[r][c] = _tetris_js__WEBPACK_IMPORTED_MODULE_1__[\"SquareState\"].empty;\n      }\n      context.fillStyle = \"GREEN\";\n      context.fillRect(x, y, 5, 5);\n    }\n  }\n\n  // Edit out the currently falling piece from the boardstate\n  clearFloatingPiece(this.board);\n  m_loadedBoard = JSON.parse(JSON.stringify(this.board)); // Save a copy of the loaded board\n  this.canvas.drawBoard();\n  m_loadedStateFromImage = true;\n};\n\n// Remove the piece from midair when loading a board from a screenshot\nfunction clearFloatingPiece(board) {\n  // Start from the bottom, look for an empty row, and then clear all rows above that\n  let startedClearing = false;\n  for (let r = _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"NUM_ROW\"] - 1; r >= 0; r--) {\n    if (startedClearing) {\n      for (let c = 0; c < _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"NUM_COLUMN\"]; c++) {\n        board[r][c] = _tetris_js__WEBPACK_IMPORTED_MODULE_1__[\"SquareState\"].empty;\n      }\n    } else {\n      let rowEmpty = true;\n      for (let c = 0; c < _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"NUM_COLUMN\"]; c++) {\n        if (board[r][c] != _tetris_js__WEBPACK_IMPORTED_MODULE_1__[\"SquareState\"].empty) {\n          rowEmpty = false;\n          break;\n        }\n      }\n      if (rowEmpty) {\n        startedClearing = true;\n      }\n    }\n  }\n}\n\nfunction setUpPasteability(boardLoaderThis) {\n  // When an image is pasted, get the board state from it\n  pasteAreaElement.onpaste = function (event) {\n    // use event.originalEvent.clipboard for newer chrome versions\n    var items = (event.clipboardData || event.originalEvent.clipboardData)\n      .items;\n    // find pasted image among pasted items\n    var blob = null;\n    for (var i = 0; i < items.length; i++) {\n      if (items[i].type.indexOf(\"image\") === 0) {\n        blob = items[i].getAsFile();\n      }\n    }\n    // load image if there is a pasted image\n    if (blob !== null) {\n      var reader = new FileReader();\n      reader.onload = function (event) {\n        pastedImageElement.onload = function () {\n          boardLoaderThis.getBoardStateFromImage(pastedImageElement);\n        };\n        pastedImageElement.src = event.target.result;\n      };\n      reader.readAsDataURL(blob);\n    }\n  };\n}\n\n\n//# sourceURL=webpack:///./src/board_loader.js?");

/***/ }),

/***/ "./src/canvas.js":
/*!***********************!*\
  !*** ./src/canvas.js ***!
  \***********************/
/*! exports provided: Canvas */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Canvas\", function() { return Canvas; });\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants.js */ \"./src/constants.js\");\n/* harmony import */ var _tetris_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tetris.js */ \"./src/tetris.js\");\nconst mainCanvas = document.getElementById(\"main-canvas\");\nconst context = mainCanvas.getContext(\"2d\");\n\n\n\n\nfunction Canvas(board) {\n  this.board = board;\n}\nconst borderWidth = _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SQUARE_SIZE\"] / 7;\n\nCanvas.prototype.onClick = function (event) {\n  const rect = mainCanvas.getBoundingClientRect();\n  const x = event.clientX - rect.left;\n  const y = event.clientY - rect.top;\n  console.log(\"x: \" + x + \" y: \" + y);\n  const r = Math.floor(y / _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SQUARE_SIZE\"]);\n  const c = Math.floor(x / _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SQUARE_SIZE\"]);\n  this.board[r][c] =\n    this.board[r][c] == _tetris_js__WEBPACK_IMPORTED_MODULE_1__[\"SquareState\"].empty\n      ? _tetris_js__WEBPACK_IMPORTED_MODULE_1__[\"SquareState\"].color1\n      : _tetris_js__WEBPACK_IMPORTED_MODULE_1__[\"SquareState\"].empty;\n  this.drawBoard();\n};\n\n/** Runs an animation to clear the lines passed in in an array.\n * Doesn't affect the actual board, those updates come at the end of the animation. */\nCanvas.prototype.drawLineClears = function (rowsArray, frameNum) {\n  if (frameNum >= 15) {\n    // animation already done\n    return;\n  }\n  const rightColToClear = 5 + Math.floor(frameNum / 3);\n  const leftColToClear = 9 - rightColToClear;\n  for (const rowNum of rowsArray) {\n    context.fillStyle = \"black\";\n    context.fillRect(\n      leftColToClear * _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SQUARE_SIZE\"],\n      rowNum * _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SQUARE_SIZE\"],\n      _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SQUARE_SIZE\"],\n      _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SQUARE_SIZE\"]\n    );\n    context.fillRect(\n      rightColToClear * _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SQUARE_SIZE\"],\n      rowNum * _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SQUARE_SIZE\"],\n      _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SQUARE_SIZE\"],\n      _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SQUARE_SIZE\"]\n    );\n  }\n};\n\n// draw a square\nCanvas.prototype.drawSquare = function (x, y, color, border = false) {\n  // For I, T, and O\n  context.fillStyle = color;\n  context.fillRect(x * _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SQUARE_SIZE\"], y * _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SQUARE_SIZE\"], _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SQUARE_SIZE\"], _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SQUARE_SIZE\"]);\n\n  if (border && color !== _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"VACANT\"]) {\n    context.fillStyle = \"white\";\n    context.fillRect(\n      x * _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SQUARE_SIZE\"] + borderWidth,\n      y * _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SQUARE_SIZE\"] + borderWidth,\n      _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SQUARE_SIZE\"] - borderWidth * 2,\n      _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SQUARE_SIZE\"] - borderWidth * 2\n    );\n  }\n  // Draw 'shiny' part\n  if (color !== _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"VACANT\"]) {\n    context.fillStyle = \"white\";\n    context.fillRect(\n      x * _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SQUARE_SIZE\"],\n      y * _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SQUARE_SIZE\"],\n      borderWidth,\n      borderWidth\n    );\n    context.fillRect(\n      x * _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SQUARE_SIZE\"] + borderWidth,\n      y * _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SQUARE_SIZE\"] + borderWidth,\n      borderWidth,\n      borderWidth\n    );\n    context.fillRect(\n      x * _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SQUARE_SIZE\"] + borderWidth + borderWidth,\n      y * _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SQUARE_SIZE\"] + borderWidth,\n      borderWidth,\n      borderWidth\n    );\n    context.fillRect(\n      x * _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SQUARE_SIZE\"] + borderWidth,\n      y * _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SQUARE_SIZE\"] + borderWidth + borderWidth,\n      borderWidth,\n      borderWidth\n    );\n  }\n  // Outline\n  context.strokeStyle = \"BLACK\";\n  context.strokeRect(\n    x * _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SQUARE_SIZE\"],\n    y * _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SQUARE_SIZE\"],\n    _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SQUARE_SIZE\"],\n    _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SQUARE_SIZE\"]\n  );\n  context.strokeRect(\n    x * _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SQUARE_SIZE\"],\n    y * _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SQUARE_SIZE\"],\n    _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SQUARE_SIZE\"],\n    _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SQUARE_SIZE\"]\n  );\n};\n\n// draw the next box\nCanvas.prototype.drawNextBox = function (nextPiece) {\n  // All in units of SQUARE_SIZE\n  const startX = _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"NUM_COLUMN\"] + 1;\n  const startY = 2;\n  const width = 5;\n  const height = 4.5;\n  const pieceStartX =\n    nextPiece.id === \"I\" || nextPiece.id === \"O\" ? startX + 0.5 : startX;\n  const pieceStartY = nextPiece.id === \"I\" ? startY - 0.25 : startY + 0.25;\n  const color = _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"COLOR_PALETTE\"][nextPiece.colorId][Object(_tetris_js__WEBPACK_IMPORTED_MODULE_1__[\"GetLevel\"])() % 10];\n  // background\n  context.fillStyle = \"BLACK\";\n  context.fillRect(\n    startX * _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SQUARE_SIZE\"],\n    startY * _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SQUARE_SIZE\"],\n    width * _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SQUARE_SIZE\"],\n    height * _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SQUARE_SIZE\"]\n  );\n\n  // draw the piece\n\n  for (let r = 0; r < nextPiece.activeTetromino.length; r++) {\n    for (let c = 0; c < nextPiece.activeTetromino[r].length; c++) {\n      // Draw only occupied squares\n      if (nextPiece.activeTetromino[r][c]) {\n        this.drawSquare(\n          pieceStartX + c,\n          pieceStartY + r,\n          color,\n          nextPiece.colorId === 1\n        );\n      }\n    }\n  }\n};\n\nCanvas.prototype.drawPieceStatusString = function (displayString) {\n  const startX = (_constants_js__WEBPACK_IMPORTED_MODULE_0__[\"NUM_COLUMN\"] + 1) * _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SQUARE_SIZE\"];\n  const startY = _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SQUARE_SIZE\"];\n\n  // Clear previous text\n  context.fillStyle = \"WHITE\";\n  context.fillRect(startX, startY - 20, 100, 40);\n\n  // Write \"x of x\" text\n  context.font = \"16px monospace\";\n  context.fillStyle = \"BLACK\";\n  context.fillText(displayString, startX, startY, 100);\n};\n\nCanvas.prototype.drawPiece = function (piece) {\n  if (piece == undefined) {\n    return;\n  }\n  const level = Object(_tetris_js__WEBPACK_IMPORTED_MODULE_1__[\"GetLevel\"])();\n  const border = piece.id === \"T\" || piece.id === \"O\" || piece.id === \"I\";\n  for (let r = 0; r < piece.activeTetromino.length; r++) {\n    for (let c = 0; c < piece.activeTetromino[r].length; c++) {\n      // Draw only occupied squares\n      if (piece.activeTetromino[r][c]) {\n        if (piece.colorId !== 0) {\n          this.drawSquare(\n            piece.x + c,\n            piece.y + r,\n            _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"COLOR_PALETTE\"][piece.colorId][level % 10],\n            border\n          );\n        } else {\n          this.drawSquare(piece.x + c, piece.y + r, _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"VACANT\"], border);\n        }\n      }\n    }\n  }\n};\n\n// draw the board\nCanvas.prototype.drawBoard = function () {\n  // First, draw the pieces already locked into the board\n  const level = Object(_tetris_js__WEBPACK_IMPORTED_MODULE_1__[\"GetLevel\"])();\n  for (let r = 0; r < _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"NUM_ROW\"]; r++) {\n    for (let c = 0; c < _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"NUM_COLUMN\"]; c++) {\n      let square = this.board[r][c];\n      if (square !== 0) {\n        this.drawSquare(c, r, _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"COLOR_PALETTE\"][square][level % 10], square === 1);\n      } else {\n        this.drawSquare(c, r, _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"VACANT\"], square === 1);\n      }\n    }\n  }\n\n  // Then, draw the active piece\n  this.drawPiece(Object(_tetris_js__WEBPACK_IMPORTED_MODULE_1__[\"GetCurrentPiece\"])());\n};\n\n\n//# sourceURL=webpack:///./src/canvas.js?");

/***/ }),

/***/ "./src/constants.js":
/*!**************************!*\
  !*** ./src/constants.js ***!
  \**************************/
/*! exports provided: NUM_ROW, NUM_COLUMN, SQUARE_SIZE, VACANT, RED_COLOR, BLUE_COLOR, WHITE_COLOR, COLOR_1, COLOR_2, COLOR_3, COLOR_PALETTE, Direction, REWARDS, GRAVITY, GameState, GameSubState, DAS_TRIGGER, DAS_CHARGED_FLOOR, LINE_CLEAR_DELAY */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"NUM_ROW\", function() { return NUM_ROW; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"NUM_COLUMN\", function() { return NUM_COLUMN; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SQUARE_SIZE\", function() { return SQUARE_SIZE; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"VACANT\", function() { return VACANT; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RED_COLOR\", function() { return RED_COLOR; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BLUE_COLOR\", function() { return BLUE_COLOR; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"WHITE_COLOR\", function() { return WHITE_COLOR; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"COLOR_1\", function() { return COLOR_1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"COLOR_2\", function() { return COLOR_2; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"COLOR_3\", function() { return COLOR_3; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"COLOR_PALETTE\", function() { return COLOR_PALETTE; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Direction\", function() { return Direction; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"REWARDS\", function() { return REWARDS; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"GRAVITY\", function() { return GRAVITY; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"GameState\", function() { return GameState; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"GameSubState\", function() { return GameSubState; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DAS_TRIGGER\", function() { return DAS_TRIGGER; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DAS_CHARGED_FLOOR\", function() { return DAS_CHARGED_FLOOR; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LINE_CLEAR_DELAY\", function() { return LINE_CLEAR_DELAY; });\nconst NUM_ROW = 20;\nconst NUM_COLUMN = 10;\nconst SQUARE_SIZE = 28;\n\nconst VACANT = \"black\"; // color of an empty square\nconst RED_COLOR = \"red\";\nconst BLUE_COLOR = \"#2105f2\";\nconst WHITE_COLOR = \"white\";\n\n// color 1 is COLOR_3 with white in the center, which is used for I, T, and O\nconst COLOR_1 = {\n  0: \"rgb(0,88,248)\",\n  1: \"rgb(0,168,0)\",\n  2: \"rgb(216,0,204)\",\n  3: \"rgb(0,88,248)\",\n  4: \"rgb(228,0,88\",\n  5: \"rgb(88,248,152)\",\n  6: \"rgb(248,56,0)\",\n  7: \"rgb(104,68,252)\",\n  8: \"rgb(0,88,248)\",\n  9: \"rgb(248,56,0)\",\n};\n// color 2 is the main color of L and Z\nconst COLOR_2 = {\n  0: \"rgb(60,188,252)\",\n  1: \"rgb(148,248,24)\",\n  2: \"rgb(248,120,248)\",\n  3: \"rgb(88,216,84)\",\n  4: \"rgb(88,248,152)\",\n  5: \"rgb(104,136,252)\",\n  6: \"rgb(124,124,124)\",\n  7: \"rgb(168,0,32)\",\n  8: \"rgb(248,56,0)\",\n  9: \"rgb(252,160,68)\",\n};\n// COLOR_3 is the main color of J and S\n// It is the same as COLOR_1, but fills the whole square\nconst COLOR_3 = Object.assign(COLOR_1);\n\nconst COLOR_PALETTE = {\n  1: COLOR_1,\n  2: COLOR_2,\n  3: COLOR_3,\n};\n\nconst Direction = Object.freeze({\n  LEFT: 1,\n  RIGHT: 2,\n  DOWN: 3,\n  UP: 4,\n});\n\n// How many points for X lines at a time (before scaling by level)\nconst REWARDS = {\n  1: 40,\n  2: 100,\n  3: 300,\n  4: 1200,\n};\n// How many frames it takes to drop one square\nconst GRAVITY = {\n  0: 48,\n  1: 43,\n  2: 38,\n  3: 33,\n  4: 28,\n  5: 23,\n  6: 18,\n  7: 13,\n  8: 8,\n  9: 6,\n  10: 5,\n  11: 5,\n  12: 5,\n  13: 4,\n  14: 4,\n  15: 4,\n  16: 3,\n  17: 3,\n  18: 3,\n  19: 2,\n  29: 1,\n};\n\nconst GameState = {\n  RUNNING: \"running\",\n  PAUSED: \"paused\",\n  GAME_OVER: \"game over\",\n  START_SCREEN: \"start screen\",\n};\n\nconst GameSubState = {\n  PIECE_ACTIVE: \"piece active\",\n  ARE: \"are\",\n  LINE_CLEAR: \"line clear\",\n};\n\nconst DAS_TRIGGER = 16;\nconst DAS_CHARGED_FLOOR = 10;\nconst LINE_CLEAR_DELAY = 18;\n\n\n//# sourceURL=webpack:///./src/constants.js?");

/***/ }),

/***/ "./src/input_manager.js":
/*!******************************!*\
  !*** ./src/input_manager.js ***!
  \******************************/
/*! exports provided: InputManager */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"InputManager\", function() { return InputManager; });\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants.js */ \"./src/constants.js\");\n\n\n// Default control setup\nlet LEFT_KEYCODE = 37;\nlet RIGHT_KEYCODE = 39;\nlet ROTATE_LEFT_KEYCODE = 90;\nlet ROTATE_RIGHT_KEYCODE = 88;\nlet DOWN_KEYCODE = 40;\n\nfunction InputManager(\n  moveDownFunc,\n  moveLeftFunc,\n  moveRightFunc,\n  rotateLeftFunc,\n  rotateRightFunc,\n  togglePauseFunc,\n  getGameStateFunc,\n  getGameSubStateFunc,\n  getAREFunc\n) {\n  this.leftHeld = false;\n  this.rightHeld = false;\n  this.downHeld = false;\n  this.dasCount = 0;\n  this.softDroppedLastFrame = false;\n\n  this.togglePauseFunc = togglePauseFunc;\n  this.moveDownFunc = moveDownFunc;\n  this.moveLeftFunc = moveLeftFunc;\n  this.moveRightFunc = moveRightFunc;\n  this.rotateLeftFunc = rotateLeftFunc;\n  this.rotateRightFunc = rotateRightFunc;\n  this.getGameStateFunc = getGameStateFunc;\n  this.getGameSubStateFunc = getGameSubStateFunc;\n  this.getAREFunc = getAREFunc;\n}\n\nInputManager.prototype.handleInputsThisFrame = function () {\n  const numKeysHeld = this.downHeld + this.leftHeld + this.rightHeld;\n  // If holding multiple keys, do nothing\n  if (numKeysHeld > 1) {\n    return;\n  }\n\n  // Move piece down\n  if (this.downHeld && !this.softDroppedLastFrame) {\n    console.log(\"Soft dropping\");\n    const didMove = this.moveDownFunc();\n    if (!didMove) {\n      // If it didn't move, then it locked in. Reset pushdown between pieces.\n      this.downHeld = false;\n    }\n    this.softDroppedLastFrame = true;\n    return;\n  } else {\n    this.softDroppedLastFrame = false;\n  }\n\n  // DAS left\n  if (this.leftHeld) {\n    this.handleHeldDirection(_constants_js__WEBPACK_IMPORTED_MODULE_0__[\"Direction\"].LEFT);\n    return;\n  }\n\n  // DAS right\n  if (this.rightHeld) {\n    this.handleHeldDirection(_constants_js__WEBPACK_IMPORTED_MODULE_0__[\"Direction\"].RIGHT);\n  }\n};\n\nInputManager.prototype.isSoftDropping = function () {\n  return this.downHeld;\n};\n\nInputManager.prototype.handleHeldDirection = function (direction) {\n  // Increment DAS\n  this.dasCount = Math.min(_constants_js__WEBPACK_IMPORTED_MODULE_0__[\"DAS_TRIGGER\"], this.dasCount + 1);\n\n  if (this.dasCount == 1 || this.dasCount == _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"DAS_TRIGGER\"]) {\n    // Attempt to shift the piece\n    const didMove =\n      direction == _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"Direction\"].LEFT ? this.moveLeftFunc() : this.moveRightFunc();\n    if (didMove) {\n      // DAS is still \"charged\" so we reset it to the charged floor instead of 0\n      if (this.dasCount == _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"DAS_TRIGGER\"]) {\n        this.dasCount = _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"DAS_CHARGED_FLOOR\"];\n      }\n    } else {\n      // Wall charge\n      this.dasCount = 16;\n    }\n  }\n};\n\nInputManager.prototype.keyDownListener = function (event) {\n  // Override the browser's built-in key repeating\n  if (event.repeat) {\n    return;\n  }\n  // Piece movement - on key down\n  // Move the piece once, and if appropriate, save that the key is held (for DAS)\n  if (this.getGameStateFunc() == _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"GameState\"].RUNNING) {\n    switch (event.keyCode) {\n      case LEFT_KEYCODE:\n        // Reset DAS, unless in ARE state\n        if (this.getAREFunc() == 0) {\n          this.dasCount = 0;\n        }\n        this.leftHeld = true;\n        break;\n      case RIGHT_KEYCODE:\n        // Reset DAS, unless in ARE state\n        if (this.getAREFunc() == 0) {\n          this.dasCount = 0;\n        }\n        this.rightHeld = true;\n        break;\n      case ROTATE_LEFT_KEYCODE:\n        this.rotateLeftFunc();\n        break;\n      case ROTATE_RIGHT_KEYCODE:\n        this.rotateRightFunc();\n        break;\n      case DOWN_KEYCODE:\n        this.downHeld = true;\n        break;\n    }\n  }\n\n  // Client controls\n  if (event.keyCode == 80) {\n    // Letter 'P' pauses and unpauses\n    this.togglePauseFunc();\n  }\n};\n\nInputManager.prototype.keyUpListener = function (event) {\n  // Piece movement - on key up\n  const mainGameState = this.getGameStateFunc();\n  const gameSubState = this.getGameSubStateFunc();\n  if (mainGameState == _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"GameState\"].RUNNING) {\n    if (event.keyCode == LEFT_KEYCODE) {\n      this.leftHeld = false;\n    } else if (event.keyCode == RIGHT_KEYCODE) {\n      this.rightHeld = false;\n    } else if (\n      event.keyCode == DOWN_KEYCODE &&\n      gameSubState == _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"GameSubState\"].PIECE_ACTIVE\n    ) {\n      this.downHeld = false;\n    }\n  }\n};\n\nInputManager.prototype.getDebugText = function () {\n  let debugStr = \"\";\n  let dasVisualized = \"\";\n  for (let i = 0; i < this.dasCount; i++) {\n    dasVisualized += \"x\";\n  }\n  debugStr += \"DAS: \" + this.dasCount + \"\\n\" + dasVisualized;\n  debugStr += \"\\nLeftKey: \" + this.leftHeld;\n  debugStr += \"\\nRightKey: \" + this.rightHeld;\n  debugStr += \"\\nDownKey: \" + this.downHeld;\n  return debugStr;\n};\n\nInputManager.prototype.resetLocalVariables = function () {\n  this.leftHeld = false;\n  this.rightHeld = false;\n  this.downHeld = false;\n  this.dasCount = 0;\n  this.softDroppedLastFrame = false;\n};\n\n\n//# sourceURL=webpack:///./src/input_manager.js?");

/***/ }),

/***/ "./src/piece.js":
/*!**********************!*\
  !*** ./src/piece.js ***!
  \**********************/
/*! exports provided: Piece */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Piece\", function() { return Piece; });\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants.js */ \"./src/constants.js\");\n/* harmony import */ var _tetris__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tetris */ \"./src/tetris.js\");\n\n\n\n// The Object Piece\nfunction Piece(pieceData, board, canvas) {\n  this.rotationList = pieceData[0]; // All of the available rotations\n  this.colorId = pieceData[1];\n  this.id = pieceData[2];\n  this.board = board;\n  this.canvas = canvas;\n\n  this.rotationIndex = 0; // Start from the first rotation\n  this.activeTetromino = this.rotationList[this.rotationIndex];\n\n  this.x = 3;\n  this.y = -1;\n}\n\nPiece.prototype.equals = function (otherPiece) {\n  return this.id === otherPiece.id;\n};\n\n// Get the height of the lowest row that the piece occupies\nPiece.prototype.getHeightFromBottom = function () {\n  let maxY = 0;\n  for (let r = 0; r < this.activeTetromino.length; r++) {\n    for (let c = 0; c < this.activeTetromino[r].length; c++) {\n      // If the square is occupied by the piece, update the max\n      if (this.activeTetromino[r][c]) {\n        maxY = Math.max(maxY, this.y + r);\n      }\n    }\n  }\n  return _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"NUM_ROW\"] - maxY;\n};\n\nPiece.prototype.shouldLock = function () {\n  return this.collision(0, 1, this.activeTetromino);\n};\n\n// move Down the piece\nPiece.prototype.moveDown = function () {\n  this.y++;\n  this.canvas.drawBoard();\n};\n\n/**\n * Attempt to move the piece right.\n * @returns true if the piece moved */\nPiece.prototype.moveRight = function () {\n  if (this.collision(1, 0, this.activeTetromino)) {\n    return false;\n  } else {\n    // No collision, move the piece\n    this.x++;\n    this.canvas.drawBoard();\n    return true;\n  }\n};\n\n/**\n * Attempt to move the piece left.\n * @returns true if the piece moved */\nPiece.prototype.moveLeft = function () {\n  if (this.collision(-1, 0, this.activeTetromino)) {\n    return false;\n  } else {\n    // No collision, move the piece\n    this.x--;\n    this.canvas.drawBoard();\n    return true;\n  }\n};\n\n// rotate the piece\nPiece.prototype.rotate = function (directionInversed) {\n  const offset = directionInversed ? -1 : 1;\n  const nextIndex =\n    (this.rotationIndex + offset + this.rotationList.length) %\n    this.rotationList.length;\n  const nextPattern = this.rotationList[nextIndex];\n\n  if (!this.collision(0, 0, nextPattern)) {\n    this.rotationIndex = nextIndex;\n    this.activeTetromino = this.rotationList[this.rotationIndex];\n    this.canvas.drawBoard();\n  }\n};\n\n// Lock the piece in place\nPiece.prototype.lock = function () {\n  for (let r = 0; r < this.activeTetromino.length; r++) {\n    for (let c = 0; c < this.activeTetromino[r].length; c++) {\n      // we skip the vacant squares\n      if (!this.activeTetromino[r][c]) {\n        continue;\n      }\n\n      // we lock the piece\n      this.board[this.y + r][this.x + c] = this.colorId;\n    }\n  }\n\n  // update the board\n  this.canvas.drawBoard();\n};\n\n// Collision fucntion\nPiece.prototype.collision = function (x, y, piece) {\n  for (let r = 0; r < piece.length; r++) {\n    for (let c = 0; c < piece[r].length; c++) {\n      // if the square is empty, we skip it\n      if (!piece[r][c]) {\n        continue;\n      }\n      // coordinates of the piece after movement\n      let newX = this.x + c + x;\n      let newY = this.y + r + y;\n\n      // conditions\n      if (newX < 0 || newX >= _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"NUM_COLUMN\"] || newY >= _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"NUM_ROW\"]) {\n        return true;\n      }\n      // skip newY < 0; board[-1] will crush our game\n      if (newY < 0) {\n        continue;\n      }\n      // check if there is a locked piece alrady in place\n      if (this.board[newY][newX] != 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n\n//# sourceURL=webpack:///./src/piece.js?");

/***/ }),

/***/ "./src/piece_selector.js":
/*!*******************************!*\
  !*** ./src/piece_selector.js ***!
  \*******************************/
/*! exports provided: PieceSelector */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PieceSelector\", function() { return PieceSelector; });\n/* harmony import */ var _tetrominoes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tetrominoes.js */ \"./src/tetrominoes.js\");\nconst pieceListElement = document.getElementById(\"piece-sequence\");\n\n\n\nlet m_pieceSequenceStr = \"\";\nlet m_readIndex = 0;\nlet m_isReadingFromSequence = false;\n\nfunction PieceSelector() {}\n\n/**\n  Public functions\n  */\n\nPieceSelector.prototype.startReadingPieceSequence = function () {\n  // Get piece sequence (with spaces trimmed)\n  m_pieceSequenceStr = pieceListElement.value.replace(/ /g, \"\");\n\n  if (m_pieceSequenceStr.length > 0) {\n    m_isReadingFromSequence = true;\n    m_readIndex = 0;\n  }\n};\n\n// Get the next piece, whether that be specified or random\nPieceSelector.prototype.chooseNextPiece = function (currentPieceId) {\n  // If there is a next specified piece, select that\n  if (m_isReadingFromSequence) {\n    return this.getPresetPiece();\n  }\n  // Otherwise pick one randomly\n  m_isReadingFromSequence = false;\n  return this.getRandomPiece(currentPieceId);\n};\n\n// Get summary of piece status (e.g. \"Random piece\" or e.g. \"Piece 5 of 13\")\nPieceSelector.prototype.getStatusString = function () {\n  if (m_isReadingFromSequence) {\n    return \"Piece \" + (m_readIndex + 1) + \" of \" + m_pieceSequenceStr.length;\n  }\n  return \"Random piece\";\n};\n\n/**\n  \"Private\" functions - unused outside of this file\n  */\n\nPieceSelector.prototype.getPresetPiece = function () {\n  const nextPieceId = m_pieceSequenceStr[m_readIndex];\n  const nextPieceData = _tetrominoes_js__WEBPACK_IMPORTED_MODULE_0__[\"PIECE_LOOKUP\"][nextPieceId];\n  m_readIndex += 1;\n\n  // Check if we've reached the end of the sequence\n  if (m_readIndex >= m_pieceSequenceStr.length) {\n    m_isReadingFromSequence = false;\n    m_readIndex = 0;\n  }\n\n  return nextPieceData;\n};\n\n// Get a random piece, following the original RNG of NES tetris\nPieceSelector.prototype.getRandomPiece = function (previousPieceId) {\n  // Roll once 0-7, where 7 is a dummy value\n  let r = Math.floor(Math.random() * (_tetrominoes_js__WEBPACK_IMPORTED_MODULE_0__[\"PIECE_LIST\"].length + 1));\n  if (r == _tetrominoes_js__WEBPACK_IMPORTED_MODULE_0__[\"PIECE_LIST\"].length || previousPieceId === _tetrominoes_js__WEBPACK_IMPORTED_MODULE_0__[\"PIECE_LIST\"][r][2]) {\n    // Reroll once for repeats (or dummy) to reduce repeated pieces\n    r = Math.floor(Math.random() * _tetrominoes_js__WEBPACK_IMPORTED_MODULE_0__[\"PIECE_LIST\"].length);\n  }\n  const nextPieceData = _tetrominoes_js__WEBPACK_IMPORTED_MODULE_0__[\"PIECE_LIST\"][r];\n  return nextPieceData;\n};\n\n\n//# sourceURL=webpack:///./src/piece_selector.js?");

/***/ }),

/***/ "./src/tetris.js":
/*!***********************!*\
  !*** ./src/tetris.js ***!
  \***********************/
/*! exports provided: SquareState, GetCurrentPiece, GetLevel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SquareState\", function() { return SquareState; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"GetCurrentPiece\", function() { return GetCurrentPiece; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"GetLevel\", function() { return GetLevel; });\n/* harmony import */ var _piece_selector_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./piece_selector.js */ \"./src/piece_selector.js\");\n/* harmony import */ var _board_loader_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./board_loader.js */ \"./src/board_loader.js\");\n/* harmony import */ var _canvas_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./canvas.js */ \"./src/canvas.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./constants.js */ \"./src/constants.js\");\n/* harmony import */ var _piece_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./piece.js */ \"./src/piece.js\");\n/* harmony import */ var _input_manager_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./input_manager.js */ \"./src/input_manager.js\");\n\n\n\n\n\n\n\nconst scoreTextElement = document.getElementById(\"score\");\nconst headerTextElement = document.getElementById(\"header-text\");\nconst debugTextElement = document.getElementById(\"debug\");\nconst statsTextElement = document.getElementById(\"stats\");\nconst gameOptionsForm = document.getElementById(\"game-options-form\");\nconst startGameButton = document.getElementById(\"start-game\");\nconst restartGameButton = document.getElementById(\"restart-game\");\nconst levelSelectElement = document.getElementById(\"level-select\");\nconst mainCanvas = document.getElementById(\"main-canvas\");\n\n// 0 is empty space, 1 is T piece color, 2 is L piece color, 3 is J piece color\nconst SquareState = {\n  empty: 0,\n  color1: 1,\n  color2: 2,\n  color3: 3,\n};\n\n// Create the initial empty board\nlet m_board = [];\nfor (let r = 0; r < _constants_js__WEBPACK_IMPORTED_MODULE_3__[\"NUM_ROW\"]; r++) {\n  m_board[r] = [];\n  for (let c = 0; c < _constants_js__WEBPACK_IMPORTED_MODULE_3__[\"NUM_COLUMN\"]; c++) {\n    m_board[r][c] = SquareState.empty;\n  }\n}\n\nlet m_inputManager;\nlet m_canvas = new _canvas_js__WEBPACK_IMPORTED_MODULE_2__[\"Canvas\"](m_board);\nmainCanvas.addEventListener(\"mousedown\", function (e) {\n  console.log(\"onClick\");\n  m_canvas.onClick(e);\n});\n\nlet m_pieceSelector = new _piece_selector_js__WEBPACK_IMPORTED_MODULE_0__[\"PieceSelector\"]();\nlet m_boardLoader = new _board_loader_js__WEBPACK_IMPORTED_MODULE_1__[\"BoardLoader\"](m_board, m_canvas);\nlet m_currentPiece;\nlet m_nextPiece;\n\nlet m_level;\nlet m_gameState;\nlet m_score;\nlet m_gravityFrameCount;\nlet m_ARE;\nlet m_lineClearDelay;\nlet m_linesCleared;\n\n// Exported methods that allow other classes to access the variables in this file\n\nconst GetCurrentPiece = () => {\n  return m_currentPiece;\n};\n\nconst GetLevel = () => {\n  return m_level;\n};\n\nfunction refreshHeaderText() {\n  let newText = \"\";\n  switch (m_gameState) {\n    case _constants_js__WEBPACK_IMPORTED_MODULE_3__[\"GameState\"].START_SCREEN:\n      newText = \"Welcome to Tetris Trainer!\";\n      break;\n    case _constants_js__WEBPACK_IMPORTED_MODULE_3__[\"GameState\"].RUNNING:\n      newText = \"\";\n      break;\n    case _constants_js__WEBPACK_IMPORTED_MODULE_3__[\"GameState\"].GAME_OVER:\n      newText = \"Game over!\";\n      break;\n    case _constants_js__WEBPACK_IMPORTED_MODULE_3__[\"GameState\"].PAUSED:\n      newText = \"Paused\";\n      break;\n  }\n  headerTextElement.innerText = newText;\n}\n\nfunction refreshDebugText() {\n  debugTextElement.innerText = m_inputManager.getDebugText();\n}\n\nfunction refreshStats() {\n  // Calculate parity, where the top left square is \"1\" and adjacent squares are \"-1\"\n  let parity = 0;\n  for (let r = 0; r < _constants_js__WEBPACK_IMPORTED_MODULE_3__[\"NUM_ROW\"]; r++) {\n    for (let c = 0; c < _constants_js__WEBPACK_IMPORTED_MODULE_3__[\"NUM_COLUMN\"]; c++) {\n      if (m_board[r][c] != SquareState.empty) {\n        // Add 1 or -1 to parity total based on the square's location\n        const cellConstant = (r + c) % 2 == 0 ? 1 : -1;\n        parity += cellConstant;\n      }\n    }\n  }\n\n  statsTextElement.innerText = \"Parity: \" + parity;\n}\n\nfunction getFullRows() {\n  let fullLines = [];\n  for (let r = 0; r < _constants_js__WEBPACK_IMPORTED_MODULE_3__[\"NUM_ROW\"]; r++) {\n    let isRowFull = true;\n    for (let c = 0; c < _constants_js__WEBPACK_IMPORTED_MODULE_3__[\"NUM_COLUMN\"]; c++) {\n      if (m_board[r][c] == SquareState.empty) {\n        isRowFull = false;\n        break;\n      }\n    }\n    if (isRowFull) {\n      fullLines.push(r);\n    }\n  }\n  return fullLines;\n}\n\nfunction removeFullRows() {\n  for (const r of m_linesCleared) {\n    // Move down all the rows above it\n    for (let y = r; y > 1; y--) {\n      for (let c = 0; c < _constants_js__WEBPACK_IMPORTED_MODULE_3__[\"NUM_COLUMN\"]; c++) {\n        m_board[y][c] = m_board[y - 1][c];\n      }\n    }\n    // Clear out the very top row (newly shifted into the screen)\n    for (let c = 0; c < _constants_js__WEBPACK_IMPORTED_MODULE_3__[\"NUM_COLUMN\"]; c++) {\n      m_board[0][c] = SquareState.empty;\n    }\n  }\n  const numLinesCleared = m_linesCleared.length;\n  if (numLinesCleared > 0) {\n    // Update the board\n    m_canvas.drawBoard();\n\n    // Update the score\n    m_score += _constants_js__WEBPACK_IMPORTED_MODULE_3__[\"REWARDS\"][numLinesCleared] * (m_level + 1);\n    scoreTextElement.innerText = \"Score: \" + m_score;\n  }\n  m_linesCleared = [];\n}\n\nfunction checkForGameOver() {\n  // If the current piece collides with the existing board as it spawns in, you die\n  const currentTetromino = m_currentPiece.activeTetromino;\n  for (let r = 0; r < currentTetromino.length; r++) {\n    for (let c = 0; c < currentTetromino[r].length; c++) {\n      if (\n        currentTetromino[r][c] &&\n        m_board[m_currentPiece.y + r][m_currentPiece.x + c]\n      ) {\n        m_gameState = _constants_js__WEBPACK_IMPORTED_MODULE_3__[\"GameState\"].GAME_OVER;\n        refreshHeaderText();\n        return;\n      }\n    }\n  }\n}\n\nfunction getNewPiece() {\n  m_currentPiece = m_nextPiece;\n\n  checkForGameOver();\n\n  // Piece status is drawn first since the read index increments when the next\n  // piece is selected\n  m_canvas.drawPieceStatusString(m_pieceSelector.getStatusString());\n  m_nextPiece = new _piece_js__WEBPACK_IMPORTED_MODULE_4__[\"Piece\"](\n    m_pieceSelector.chooseNextPiece(m_currentPiece.id),\n    m_board,\n    m_canvas\n  );\n  m_canvas.drawPiece(m_currentPiece);\n  m_canvas.drawNextBox(m_nextPiece);\n}\n\nfunction resetLocalVariables() {\n  m_score = 0;\n  m_gravityFrameCount = 0;\n  m_ARE = 0;\n  m_lineClearDelay = 0;\n  m_linesCleared = [];\n  m_level = 0;\n  m_gameState = _constants_js__WEBPACK_IMPORTED_MODULE_3__[\"GameState\"].START_SCREEN;\n  m_inputManager.resetLocalVariables();\n}\n\nfunction startGame() {\n  // Reset game values\n  resetLocalVariables();\n  m_pieceSelector.startReadingPieceSequence();\n  m_boardLoader.resetBoard();\n\n  // Parse the level\n  const levelSelected = parseInt(levelSelectElement.value);\n  if (Number.isInteger(levelSelected) && levelSelected > 0) {\n    m_level = levelSelected;\n  } else {\n    m_level = 0;\n  }\n\n  // Get the first piece and put it in the next piece slot. Will be bumped to current in getNewPiece()\n  m_nextPiece = new _piece_js__WEBPACK_IMPORTED_MODULE_4__[\"Piece\"](\n    m_pieceSelector.chooseNextPiece(\"\"),\n    m_board,\n    m_canvas\n  );\n  getNewPiece();\n\n  // Refresh UI\n  m_canvas.drawBoard();\n  refreshHeaderText();\n\n  m_gameState = _constants_js__WEBPACK_IMPORTED_MODULE_3__[\"GameState\"].RUNNING;\n}\n\n// 60 FPS game loop\nfunction gameLoop() {\n  if (m_gameState == _constants_js__WEBPACK_IMPORTED_MODULE_3__[\"GameState\"].RUNNING) {\n    if (m_lineClearDelay > 0) {\n      // Still animating line clear\n      m_lineClearDelay -= 1;\n      // Do subtraction so animation frames count up\n      m_canvas.drawLineClears(\n        m_linesCleared,\n        _constants_js__WEBPACK_IMPORTED_MODULE_3__[\"LINE_CLEAR_DELAY\"] - m_lineClearDelay\n      );\n      if (m_lineClearDelay == 0) {\n        // Clear the lines for real and shift stuff down\n        removeFullRows();\n      }\n    } else if (m_ARE > 0) {\n      // Waiting for next piece\n      m_ARE -= 1;\n    } else {\n      m_inputManager.handleInputsThisFrame();\n      m_gravityFrameCount += 1;\n      refreshDebugText();\n      refreshStats();\n      // Move the piece down when appropriate\n      if (\n        !m_inputManager.isSoftDropping() &&\n        m_gravityFrameCount >= _constants_js__WEBPACK_IMPORTED_MODULE_3__[\"GRAVITY\"][m_level]\n      ) {\n        moveCurrentPieceDown();\n        m_gravityFrameCount = 0;\n      }\n    }\n  }\n  window.setTimeout(gameLoop, 16.33);\n\n  // Slo-mo testing\n  // window.setTimeout(gameLoop, 50);\n}\n\n/** Delegate functions to controls code */\n\n/** @returns whether the piece moved */\nfunction movePieceLeft() {\n  return m_currentPiece.moveLeft();\n}\n\n/** @returns whether the piece moved */\nfunction movePieceRight() {\n  return m_currentPiece.moveRight();\n}\n\n/** @returns whether the piece moved */\nfunction moveCurrentPieceDown() {\n  if (m_currentPiece.shouldLock()) {\n    // Lock in piece and get another piece\n    const lockHeight = m_currentPiece.getHeightFromBottom();\n    m_currentPiece.lock();\n    getNewPiece();\n\n    // Clear lines\n    m_linesCleared = getFullRows();\n    if (m_linesCleared.length > 0) {\n      m_lineClearDelay = _constants_js__WEBPACK_IMPORTED_MODULE_3__[\"LINE_CLEAR_DELAY\"]; // Clear delay counts down from max val\n    }\n\n    // Get the ARE based on piece lock height\n    /* ARE (frame delay before next piece) is 10 frames for 0-2 height, then an additional \n      2 frames for each group of 4 above that.\n        E.g. 9 high would be: 10 + 2 + 2 = 14 frames */\n    m_ARE = 10 + Math.floor((lockHeight + 2) / 4) * 2;\n\n    return false; // Return false because the piece didn't shift down\n  } else {\n    // Move down as usual\n    m_currentPiece.moveDown();\n    return true; // Return true because the piece moved down\n  }\n}\n\nfunction rotatePieceLeft() {\n  m_currentPiece.rotate(true);\n}\n\nfunction rotatePieceRight() {\n  m_currentPiece.rotate(false);\n}\n\nfunction togglePause() {\n  if (m_gameState == _constants_js__WEBPACK_IMPORTED_MODULE_3__[\"GameState\"].RUNNING) {\n    m_gameState = _constants_js__WEBPACK_IMPORTED_MODULE_3__[\"GameState\"].PAUSED;\n    refreshHeaderText();\n  } else if (m_gameState == _constants_js__WEBPACK_IMPORTED_MODULE_3__[\"GameState\"].PAUSED) {\n    m_gameState = _constants_js__WEBPACK_IMPORTED_MODULE_3__[\"GameState\"].RUNNING;\n    refreshHeaderText();\n  }\n}\n\nfunction getGameSubState() {\n  if (m_lineClearDelay > 0) {\n    return _constants_js__WEBPACK_IMPORTED_MODULE_3__[\"GameSubState\"].LINE_CLEAR;\n  } else if (m_ARE > 0) {\n    return _constants_js__WEBPACK_IMPORTED_MODULE_3__[\"GameSubState\"].ARE;\n  } else {\n    return _constants_js__WEBPACK_IMPORTED_MODULE_3__[\"GameSubState\"].PIECE_ACTIVE;\n  }\n}\n\nfunction getGameState() {\n  return m_gameState;\n}\n\nfunction getARE() {\n  return m_ARE;\n}\n\n/**\n * SCRIPT START\n */\nm_inputManager = new _input_manager_js__WEBPACK_IMPORTED_MODULE_5__[\"InputManager\"](\n  moveCurrentPieceDown,\n  movePieceLeft,\n  movePieceRight,\n  rotatePieceLeft,\n  rotatePieceRight,\n  togglePause,\n  getGameState,\n  getGameSubState,\n  getARE\n);\n\ndocument.addEventListener(\"keydown\", (e) => {\n  m_inputManager.keyDownListener(e);\n});\ndocument.addEventListener(\"keyup\", (e) => {\n  m_inputManager.keyUpListener(e);\n});\n\ngameOptionsForm.addEventListener(\"submit\", (e) => {\n  e.preventDefault();\n  startGameButton.focus();\n  startGame();\n});\n\nresetLocalVariables();\nm_canvas.drawBoard();\nrefreshHeaderText();\ngameLoop();\n\n\n//# sourceURL=webpack:///./src/tetris.js?");

/***/ }),

/***/ "./src/tetrominoes.js":
/*!****************************!*\
  !*** ./src/tetrominoes.js ***!
  \****************************/
/*! exports provided: PIECE_LOOKUP, PIECE_LIST */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PIECE_LOOKUP\", function() { return PIECE_LOOKUP; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PIECE_LIST\", function() { return PIECE_LIST; });\nconst PIECE_I = [\n  [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [1, 1, 1, 1],\n    [0, 0, 0, 0],\n  ],\n\n  [\n    [0, 0, 1, 0],\n    [0, 0, 1, 0],\n    [0, 0, 1, 0],\n    [0, 0, 1, 0],\n  ],\n];\n\nconst PIECE_J = [\n  [\n    [0, 0, 0, 0],\n    [0, 1, 1, 1],\n    [0, 0, 0, 1],\n  ],\n\n  [\n    [0, 0, 1, 0],\n    [0, 0, 1, 0],\n    [0, 1, 1, 0],\n  ],\n\n  [\n    [0, 1, 0, 0],\n    [0, 1, 1, 1],\n    [0, 0, 0, 0],\n  ],\n\n  [\n    [0, 0, 1, 1],\n    [0, 0, 1, 0],\n    [0, 0, 1, 0],\n  ],\n];\n\nconst PIECE_L = [\n  [\n    [0, 0, 0, 0],\n    [0, 1, 1, 1],\n    [0, 1, 0, 0],\n  ],\n\n  [\n    [0, 1, 1, 0],\n    [0, 0, 1, 0],\n    [0, 0, 1, 0],\n  ],\n\n  [\n    [0, 0, 0, 1],\n    [0, 1, 1, 1],\n    [0, 0, 0, 0],\n  ],\n\n  [\n    [0, 0, 1, 0],\n    [0, 0, 1, 0],\n    [0, 0, 1, 1],\n  ],\n];\n\nconst PIECE_O = [\n  [\n    [0, 0, 0, 0],\n    [0, 1, 1, 0],\n    [0, 1, 1, 0],\n    [0, 0, 0, 0],\n  ],\n];\n\nconst PIECE_S = [\n  [\n    [0, 0, 0, 0],\n    [0, 0, 1, 1],\n    [0, 1, 1, 0],\n  ],\n\n  [\n    [0, 0, 1, 0],\n    [0, 0, 1, 1],\n    [0, 0, 0, 1],\n  ],\n];\n\nconst PIECE_T = [\n  [\n    [0, 0, 0, 0],\n    [0, 1, 1, 1],\n    [0, 0, 1, 0],\n  ],\n\n  [\n    [0, 0, 1, 0],\n    [0, 1, 1, 0],\n    [0, 0, 1, 0],\n  ],\n\n  [\n    [0, 0, 1, 0],\n    [0, 1, 1, 1],\n    [0, 0, 0, 0],\n  ],\n\n  [\n    [0, 0, 1, 0],\n    [0, 0, 1, 1],\n    [0, 0, 1, 0],\n  ],\n];\n\nconst PIECE_Z = [\n  [\n    [0, 0, 0, 0],\n    [0, 1, 1, 0],\n    [0, 0, 1, 1],\n  ],\n\n  [\n    [0, 0, 0, 1],\n    [0, 0, 1, 1],\n    [0, 0, 1, 0],\n  ],\n];\n\n// The piece list, with colors and letter identifiers\n\n// [Definition, Color Set, Corresponding Letter]\nconst PIECE_LOOKUP = {\n  Z: [PIECE_Z, 2, \"Z\"],\n  S: [PIECE_S, 3, \"S\"],\n  T: [PIECE_T, 1, \"T\"],\n  O: [PIECE_O, 1, \"O\"],\n  L: [PIECE_L, 2, \"L\"],\n  I: [PIECE_I, 1, \"I\"],\n  J: [PIECE_J, 3, \"J\"],\n};\n\nconst PIECE_LIST = Object.values(PIECE_LOOKUP);\n\n\n//# sourceURL=webpack:///./src/tetrominoes.js?");

/***/ })

/******/ });